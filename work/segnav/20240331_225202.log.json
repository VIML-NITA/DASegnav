{"env_info": "sys.platform: linux\nPython: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3050 Laptop GPU\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_12.4.r12.4/compiler.33961263_0\nGCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1\nOpenCV: 4.9.0\nMMCV: 1.3.16\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.21.0+0b320dd", "seed": 1707607922, "exp_name": "segnav_cfg.py", "mmseg_version": "0.21.0+0b320dd", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    backbone=dict(\n        type='MixVisionTransformer',\n        in_channels=3,\n        embed_dims=128,\n        num_stages=4,\n        num_layers=[2, 2, 2, 2],\n        num_heads=[1, 2, 5, 8],\n        patch_sizes=[7, 3, 3, 3],\n        sr_ratios=[8, 4, 2, 1],\n        out_indices=(0, 1, 2, 3),\n        mlp_ratio=4,\n        qkv_bias=True,\n        drop_rate=0.1,\n        attn_drop_rate=0.0,\n        drop_path_rate=0.1),\n    decode_head=dict(\n        type='APFormerHead',\n        feature_strides=[2, 4, 8, 16],\n        in_channels=[128, 256, 640, 1024],\n        in_index=[0, 1, 2, 3],\n        channels=512,\n        num_classes=6),\n    auxiliary_head=[\n        dict(\n            type='FCNHead',\n            in_channels=640,\n            channels=32,\n            num_convs=1,\n            num_classes=6,\n            in_index=-2,\n            norm_cfg=dict(type='SyncBN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            loss_decode=dict(\n                type='DiceLoss', use_sigmoid=True, loss_weight=0.4)),\n        dict(\n            type='FCNHead',\n            in_channels=256,\n            channels=32,\n            num_convs=1,\n            num_classes=6,\n            in_index=-3,\n            norm_cfg=dict(type='SyncBN', requires_grad=True),\n            concat_input=False,\n            align_corners=False,\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.4))\n    ],\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'RUGDDataset_Group6_New2'\ndata_root = 'data/rugd/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nimg_size = (688, 550)\ncrop_size = (300, 375)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(688, 550), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(300, 375), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(300, 375), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 375),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(300, 375), pad_val=0, seg_pad_val=255),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=6,\n    img_size=(300, 375),\n    train=dict(\n        type='RUGDDataset_Group6_New2',\n        data_root='data/rugd/',\n        img_dir='RUGD_frames-with-annotations',\n        ann_dir='RUGD_annotations',\n        split='train_ours.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(688, 550), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(300, 375), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(300, 375), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='RUGDDataset_Group6_New2',\n        data_root='data/rugd/',\n        img_dir='RUGD_frames-with-annotations',\n        ann_dir='RUGD_annotations',\n        split='val_ours.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 375),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(\n                        type='Pad',\n                        size=(300, 375),\n                        pad_val=0,\n                        seg_pad_val=255),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='RUGDDataset_Group6_New2',\n        data_root='data/rugd/',\n        img_dir='RUGD_frames-with-annotations',\n        ann_dir='RUGD_annotations',\n        split='test_ours.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 375),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(\n                        type='Pad',\n                        size=(300, 375),\n                        pad_val=0,\n                        seg_pad_val=255),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.093, weight_decay=4e-05)\noptimizer_config = dict()\nrunner = dict(type='IterBasedRunner', max_iters=240000)\ntotal_iters = 240000\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=240000, metric='mIoU')\nlr_config = dict(\n    policy='poly',\n    power=0.9,\n    min_lr=1e-06,\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    by_epoch=False)\nloss_decode = dict(type='DiceLoss', use_sigmoid=True, loss_weight=1.0)\nwork_dir = './work_dirs/segnav_cfg'\ngpu_ids = [0]\nauto_resume = False\nseed = 1707607922\n", "CLASSES": ["background", "stable", "granular", "poor foothold", "high resistance", "obstacle"], "PALETTE": [[0, 0, 0], [0, 128, 0], [255, 255, 0], [255, 128, 0], [255, 0, 0], [0, 0, 128]]}
